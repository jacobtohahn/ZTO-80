0001   0000             ;==================================================================================
0002   0000             ; ZTO-80 Serial I/O for NASCOM Basic 4.7
0003   0000             ; Jacob Hahn, 2020
0004   0000             ; Email: jtohahn@gmail.com
0005   0000             ;
0006   0000             ; The majority of the following code was written by Grant Searle.
0007   0000             ; It has been modified by me for use with my custom Z80 SBC, using
0008   0000             ; a Z80 SIO instead of a 6850 ACIA.
0009   0000             ;
0010   0000             ; The original comments are as follow:
0011   0000             ;
0012   0000             ;   Contents of this file are copyright Grant Searle
0013   0000             ;
0014   0000             ;   You have permission to use this for NON COMMERCIAL USE ONLY
0015   0000             ;   If you wish to use it elsewhere, please include an acknowledgement to myself.
0016   0000             ;
0017   0000             ;   http://searle.hostei.com/grant/index.html
0018   0000             ;
0019   0000             ;   eMail: home.micros01@btinternet.com
0020   0000             ;
0021   0000             ;   If the above don't work, please perform an Internet search to see if I have
0022   0000             ;   updated the web page hosting service.
0023   0000             ;
0024   0000             ;==================================================================================
0025   0000             
0026   0000             ; Minimum Z80 SIO interrupt driven serial I/O to run modified NASCOM Basic 4.7
0027   0000             ; Full input buffering with incoming data hardware handshaking
0028   0000             ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
0029   0000             
0030   0000             SER_BUFSIZE     .EQU     3FH
0031   0000             SER_FULLSIZE    .EQU     30H
0032   0000             SER_EMPTYSIZE   .EQU     5
0033   0000             
0034   0000             SIO_D           .EQU     $00             ; Address of SIO command register
0035   0000             SIO_C           .EQU     $02             ; Address of SIO data register
0036   0000             
0037   0000             serBuf          .EQU     $8000
0038   0000             serInPtr        .EQU     serBuf+SER_BUFSIZE
0039   0000             serRdPtr        .EQU     serInPtr+2
0040   0000             serBufUsed      .EQU     serRdPtr+2
0041   0000             basicStarted    .EQU     serBufUsed+1
0042   0000             TEMPSTACK       .EQU     $80ED           ; Top of BASIC line input buffer so is "free ram" when BASIC resets
0043   0000             
0044   0000             CR              .EQU     0DH
0045   0000             LF              .EQU     0AH
0046   0000             CS              .EQU     0CH             ; Clear screen
0047   0000             
0048   0000                             .ORG $0000
0049   0000             ;------------------------------------------------------------------------------
0050   0000             ; Reset
0051   0000             
0052   0000 F3          RST00           DI                       ;Disable interrupts
0053   0001 C3 D4 00                    JP       INIT            ;Initialize Hardware and go
0054   0004             
0055   0004             ;------------------------------------------------------------------------------
0056   0004             ; TX a character over RS232
0057   0004             
0058   0008                             .ORG     0008H
0059   0008 C3 B7 00    RST08            JP      TXA
0060   000B             
0061   000B             ;------------------------------------------------------------------------------
0062   000B             ; RX a character over RS232 Channel A [Console], hold here until char ready.
0063   000B             
0064   0010                             .ORG 0010H
0065   0010 C3 8D 00    RST10            JP      RXA
0066   0013             
0067   0013             ;------------------------------------------------------------------------------
0068   0013             ; Check serial status
0069   0013             
0070   0018                             .ORG 0018H
0071   0018 C3 C6 00    RST18            JP      CKINCHAR
0072   001B             
0073   001B             ;------------------------------------------------------------------------------
0074   001B             ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
0075   001B             
0076   0038                             .ORG     0038H
0077   0038 18 00       RST38            JR      serialInt
0078   003A             
0079   003A             ;------------------------------------------------------------------------------
0080   003A F5          serialInt:      PUSH     AF
0081   003B E5                          PUSH     HL
0082   003C             
0083   003C 3E 00                       LD       A,$00
0084   003E D3 02                       OUT      (SIO_C),A
0085   0040 DB 02                       IN       A,(SIO_C)
0086   0042 E6 01                       AND      $01             ; Check if interrupt due to read buffer full
0087   0044 28 2C                       JR       Z,rts0          ; if not, ignore
0088   0046             
0089   0046 DB 00                       IN       A,(SIO_D)
0090   0048 F5                          PUSH     AF
0091   0049 3A 43 80                    LD       A,(serBufUsed)
0092   004C FE 3F                       CP       SER_BUFSIZE     ; If full then ignore
0093   004E 20 03                       JR       NZ,notFull
0094   0050 F1                          POP      AF
0095   0051 18 1F                       JR       rts0
0096   0053             
0097   0053 2A 3F 80    notFull:        LD       HL,(serInPtr)
0098   0056 23                          INC      HL
0099   0057 7D                          LD       A,L             ; Only need to check low byte because buffer<256 bytes
0100   0058 FE 3F                       CP       (serBuf+SER_BUFSIZE) & $FF
0101   005A 20 03                       JR       NZ, notWrap
0102   005C 21 00 80                    LD       HL,serBuf
0103   005F 22 3F 80    notWrap:        LD       (serInPtr),HL
0104   0062 F1                          POP      AF
0105   0063 77                          LD       (HL),A
0106   0064 3A 43 80                    LD       A,(serBufUsed)
0107   0067 3C                          INC      A
0108   0068 32 43 80                    LD       (serBufUsed),A
0109   006B FE 30                       CP       SER_FULLSIZE
0110   006D 38 03                       JR       C,rts0
0111   006F CD 77 00                    CALL     A_RTS_OFF
0112   0072 E1          rts0:           POP      HL
0113   0073 F1                          POP      AF
0114   0074 FB                          EI
0115   0075 ED 4D                       RETI
0116   0077             
0117   0077             ;------------------------------------------------------------------------------
0118   0077             ; disable RT
0119   0077             ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
0120   0077             A_RTS_OFF:
0121   0077 F5                          PUSH    af             ; store A
0122   0078 3E 05                       LD      a,00000101b      ; write into WR0: select WR5
0123   007A D3 02                       OUT     (SIO_C),a
0124   007C 3E E8                       LD      a,11101000b      ; 8 bits/TX char; TX enable; RTS disable
0125   007E D3 02                       OUT     (SIO_C),a
0126   0080 F1                          POP     af              ; retrieve A
0127   0081 C9                          RET                 ; exit
0128   0082             
0129   0082             ; enable RT
0130   0082             ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
0131   0082             A_RTS_ON:
0132   0082 F5                          PUSH    af             ; store A
0133   0083 3E 05                       LD      a,00000101b      ; write into WR0: select WR5
0134   0085 D3 02                       OUT     (SIO_C),a
0135   0087 3E EA                       LD      a,11101010b      ; 8 bits/TX char; TX enable; RTS enable
0136   0089 D3 02                       OUT     (SIO_C),a
0137   008B F1                          POP     af              ; retrieve A
0138   008C C9                          RET                 ; return
0139   008D             ;------------------------------------------------------------------------------
0140   008D             RXA:
0141   008D 3A 43 80    waitForChar:    LD       A,(serBufUsed)
0142   0090 FE 00                       CP       $00
0143   0092 28 F9                       JR       Z, waitForChar
0144   0094 E5                          PUSH     HL
0145   0095 2A 41 80                    LD       HL,(serRdPtr)
0146   0098 23                          INC      HL
0147   0099 7D                          LD       A,L             ; Only need to check low byte because buffer<256 bytes
0148   009A FE 3F                       CP       (serBuf+SER_BUFSIZE) & $FF
0149   009C 20 03                       JR       NZ, notRdWrap
0150   009E 21 00 80                    LD       HL,serBuf
0151   00A1 F3          notRdWrap:      DI
0152   00A2 22 41 80                    LD       (serRdPtr),HL
0153   00A5 3A 43 80                    LD       A,(serBufUsed)
0154   00A8 3D                          DEC      A
0155   00A9 32 43 80                    LD       (serBufUsed),A
0156   00AC FE 05                       CP       SER_EMPTYSIZE
0157   00AE 30 03                       JR       NC,rts1
0158   00B0 CD 82 00                    CALL     A_RTS_ON
0159   00B3             rts1:
0160   00B3 7E                          LD       A,(HL)
0161   00B4 FB                          EI
0162   00B5 E1                          POP      HL
0163   00B6 C9                          RET                      ; Char ready in A
0164   00B7             
0165   00B7             ;------------------------------------------------------------------------------
0166   00B7 F5          TXA:            PUSH     AF              ; Store character
0167   00B8 3E 00       conout1:        LD       A,00H
0168   00BA D3 02                       OUT      (SIO_C),A
0169   00BC DB 02                       IN       A,(SIO_C)       ; Status byte
0170   00BE CB 57                       BIT      2,A             ; Set Zero flag if still transmitting character
0171   00C0 28 F6                       JR       Z,conout1       ; Loop until flag signals ready
0172   00C2 F1                          POP      AF              ; Retrieve character
0173   00C3 D3 00                       OUT      (SIO_D),A       ; Output the character
0174   00C5 C9                          RET
0175   00C6             
0176   00C6             ;------------------------------------------------------------------------------
0177   00C6 3A 43 80    CKINCHAR        LD       A,(serBufUsed)
0178   00C9 FE 00                       CP       $0
0179   00CB C9                          RET
0180   00CC             
0181   00CC 7E          PRINT:          LD       A,(HL)          ; Get character
0182   00CD B7                          OR       A               ; Is it $00 ?
0183   00CE C8                          RET      Z               ; Then RETurn on terminator
0184   00CF CF                          RST      08H             ; Print it
0185   00D0 23                          INC      HL              ; Next Character
0186   00D1 18 F9                       JR       PRINT           ; Continue until $00
0187   00D3 C9                          RET
0188   00D4             ;------------------------------------------------------------------------------
0189   00D4             INIT:
0190   00D4 21 ED 80                   LD        HL,TEMPSTACK    ; Temp stack
0191   00D7 F9                         LD        SP,HL           ; Set up a temporary stack
0192   00D8 21 00 80                   LD        HL,serBuf
0193   00DB 22 3F 80                   LD        (serInPtr),HL
0194   00DE 22 41 80                   LD        (serRdPtr),HL
0195   00E1 AF                         XOR       A               ; 0 to accumulator
0196   00E2 32 43 80                   LD        (serBufUsed),A
0197   00E5 3E 00                      LD        A,00H           ; initialize SIO
0198   00E7 D3 02                      OUT       (SIO_C),A       ; request reg. 0
0199   00E9 3E 18                      LD        A,18H           ; Channel reset
0200   00EB D3 02                      OUT       (SIO_C),A
0201   00ED 00                         NOP
0202   00EE 3E 04                      LD        A,04H           ; request reg. 4
0203   00F0 D3 02                      OUT       (SIO_C),A
0204   00F2 3E 84                      LD        A,084H          ; x32 clock, 1 stop bit, no parity
0205   00F4 D3 02                      OUT       (SIO_C),A
0206   00F6 3E 03                      LD        A,03H           ; request reg. 3
0207   00F8 D3 02                      OUT       (SIO_C),A
0208   00FA 3E C1                      LD        A,0C1H          ; 8 bit receiver, RX enable
0209   00FC D3 02                      OUT       (SIO_C),A
0210   00FE 3E 01                      LD        A,01H           ; request reg. 1
0211   0100 D3 02                      OUT       (SIO_C),A
0212   0102 3E 18                      LD        A,018H          ; RX INT on all chars
0213   0104 D3 02                      OUT       (SIO_C),A
0214   0106 3E 05                      LD        A,05H           ; request reg. 5
0215   0108 D3 02                      OUT       (SIO_C),A
0216   010A 3E EA                      LD        A,0EAH          ; Transmit 8 bits, TX enable
0217   010C D3 02                      OUT       (SIO_C),A       ; end of SIO init
0218   010E ED 56                      IM        1
0219   0110 FB                         EI
0220   0111 21 4A 01                   LD        HL,SIGNON1      ; Sign-on message
0221   0114 CD CC 00                   CALL      PRINT           ; Output string
0222   0117 3A 44 80                   LD        A,(basicStarted); Check the BASIC STARTED flag
0223   011A FE 59                      CP        'Y'             ; to see if this is power-up
0224   011C 20 16                      JR        NZ,COLDSTART    ; If not BASIC started then always do cold start
0225   011E 21 A5 01                   LD        HL,SIGNON2      ; Cold/warm message
0226   0121 CD CC 00                   CALL      PRINT           ; Output string
0227   0124             CORW:
0228   0124 CD 8D 00                   CALL      RXA
0229   0127 E6 DF                      AND       %11011111       ; lower to uppercase
0230   0129 FE 43                      CP        'C'
0231   012B 20 0F                      JR        NZ, CHECKWARM
0232   012D CF                         RST       08H
0233   012E 3E 0D                      LD        A,$0D
0234   0130 CF                         RST       08H
0235   0131 3E 0A                      LD        A,$0A
0236   0133 CF                         RST       08H
0237   0134 3E 59       COLDSTART:     LD        A,'Y'           ; Set the BASIC STARTED flag
0238   0136 32 44 80                   LD        (basicStarted),A
0239   0139 C3 00 02                   JP        $0200          ; Start BASIC COLD
0240   013C             CHECKWARM:
0241   013C FE 57                      CP        'W'
0242   013E 20 E4                      JR        NZ, CORW
0243   0140 CF                         RST       08H
0244   0141 3E 0D                      LD        A,$0D
0245   0143 CF                         RST       08H
0246   0144 3E 0A                      LD        A,$0A
0247   0146 CF                         RST       08H
0248   0147 C3 03 02                   JP        $0203           ; Start BASIC WARM
0249   014A             
0250   014A 0C          SIGNON1:       .BYTE     CS
0251   014B 5A 54 4F 2D                .BYTE     "ZTO-80 By Jacob Hahn",CR,LF
0251   014F 38 30 20 42 
0251   0153 79 20 4A 61 
0251   0157 63 6F 62 20 
0251   015B 48 61 68 6E 
0251   015F 0D 0A 
0252   0161 4F 72 69 67                .BYTE     "Original Code Copyright Grant Searle",CR,LF
0252   0165 69 6E 61 6C 
0252   0169 20 43 6F 64 
0252   016D 65 20 43 6F 
0252   0171 70 79 72 69 
0252   0175 67 68 74 20 
0252   0179 47 72 61 6E 
0252   017D 74 20 53 65 
0252   0181 61 72 6C 65 
0252   0185 0D 0A 
0253   0187 5A 54 4F 2D                .BYTE     "ZTO-80 BASIC v1.0.0 Startup",CR,LF,0
0253   018B 38 30 20 42 
0253   018F 41 53 49 43 
0253   0193 20 76 31 2E 
0253   0197 30 2E 30 20 
0253   019B 53 74 61 72 
0253   019F 74 75 70 0D 
0253   01A3 0A 00 
0254   01A5 0D 0A       SIGNON2:       .BYTE     CR,LF
0255   01A7 43 6F 6C 64                .BYTE     "Cold or warm start (C or W)? ",0
0255   01AB 20 6F 72 20 
0255   01AF 77 61 72 6D 
0255   01B3 20 73 74 61 
0255   01B7 72 74 20 28 
0255   01BB 43 20 6F 72 
0255   01BF 20 57 29 3F 
0255   01C3 20 00 
0256   01C5             
0257   01C5                            .END
tasm: Number of errors = 0
